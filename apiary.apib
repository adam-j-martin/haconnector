FORMAT: 1A
HOST: https://api.hanmeraccommodation.co.nz

# Hanmer Accommodation Connector
The Hanmer Accommodation Connector is a service to keep a variety of accommodation booking engines in sync.

## Authentication
This API is authenticated using HTTP Basic Auth over HTTPS. Any requests over plain HTTP will fail.

A user's email address and password can be provided as auth credentials, for example:

    $ curl -u email:password https://api.hanmeraccommodation.co.nz/bookings
    


## Requests
The base URL of the API is `https://api.hanmeraccommodation.co.nz`

## HTTP Verbs
We use standard HTTP verbs to indicate intent of a request:

+ `GET` - To retrieve a resource or a collection of resources
+ `POST` - To create a resource
+ `PATCH` - To modify a resource
+ `PUT` - To set a resource
+ `DELETE` - To delete a resource 

## Limited HTTP Clients
If you are using an HTTP client that doesn't support `PUT`, `PATCH` or `DELETE` requests, 
send a `POST` request with an `X-HTTP-Method-Override` header specifying the desired verb. For example:

    $ curl -u token:X https://api.hanmeraccommodation.co.nz/543abc \
        -X POST \
        -H "X-HTTP-Method-Override: DELETE"

## HTTP Status Codes
We use HTTP status codes to indicate success or failure of a request.

**Success codes:**

+ `200 OK` - Request succeeded. Response included
+ `201 Created` - Resource created. URL to new resource in Location header
+ `202 Accepted` - Request accepted, but has not processed (or is still processing)
+ `204 No Content` - Request succeeded, but no response body

**Error codes:**

+ `400 Bad Request` - Could not parse request
+ `401 Unauthorized` - No authentication credentials provided or authentication failed
+ `403 Forbidden` - Authenticated user does not have access
+ `404 Not Found` - Resource not found
+ `415 Unsupported Media Type` - POST/PUT/PATCH request occurred without a application/json content type
+ `422 Unprocessable Entry` - A request to modify or create a resource failed due to a validation error
+ `429 Too Many Requests` - Request rejected due to rate limiting
+ `500, 501, 502, 503, etc` - An internal server error occured

## Errors
All 400 series errors (400, 401, 403, etc) will be returned with a JSON object in the body and a application/json content type.
    
    {
        "message": "Not Found"
    }
    
500 series error codes (500, 501, 502, etc) do not return JSON bodies.

## Validation Errors
In case of validation errors on a POST/PUT/PATCH request, a 422 Unprocessable Entry status code will be returned. 
The JSON response body will include an array of error messages.

    {
        "message": "Validation Failed",
        "errors": [
          {
            "message": "Field is not valid"
          },
          {
            "message": "Value for 'name' is not valid"
          }
        ]
    }

## Rate Limiting
The API is rate limited to 100 credits per minute per account, across all end points, 
users and tokens. A request is typically worth 1 credit. However, embedding and counting 
can increase the the amount of required credits for a request. 
All responses include headers describing the current rate limit status:

>Rate-Limit-Limit: 200

>Rate-Limit-Remaining: 199

>Rate-Limit-Used: 1

>Rate-Limit-Reset: 20

## Field Filtering
All responses from the API can limit fields to only the fields you need. Just pass 
in a fields query parameter with a comma separated list of fields you need. For example:

    GET /bookings/?fields=id,first_name,email

Would have the following response body:

    [
      {
        "id": "543abc",
        "first_name": "John",
        "email": "john@example.com"
      },
      {
        "id": "543add",
        "first_name": "Alice",
        "email": "alice@example.com
      }
    ]
    
## Embedding
Many endpoints support embedding related resources to minimize the number of 
required API round trips.

Embedding is triggered by passing in an embed query parameter, which takes a comma 
separated list of endpoint types.

    GET /bookings/543abc?embed=quoatation
    
Only certain resource types can be embedded from certain endpoints. The endpoint 
documentation specifies which ones can be embedded.

Each embedded type uses an additional rate limit credit.

## Counting
All endpoints that return a collection can provide a count of the total number of 
results. To request a count, just include a `count=true` as a query parameter. 
The count will be returned in a header `Total-Count`.

>200 OK

>**Total-Count: 135**

>Rate-Limit-Limit: 200

>Rate-Limit-Remaining: 199

>Rate-Limit-Used: 1

>Rate-Limit-Reset: 20

>Content-Type: application/json

Note that the count represents the total amount of available results, not the 
amount returned as part of the current response.

Counting uses an additional rate limit credit.

## Enveloping
If your HTTP client makes it difficult to read status codes or headers, we can 
package everything neatly into the response body. Just include envelope=true as a 
request parameter and the API will always return a 200 HTTP status code. The real 
status, headers and response will be within the body.

    GET /bookings/1234?envelope=true

If booking 1234 does not exist then the following would be returned:

    {
      "status": 404,
      "headers": {
        "Rate-Limit-Limit": 200,
        "Rate-Limit-Remaining": 150,
        "Rate-Limit-Used": 0,
        "Rate-Limit-Reset": 25
    },
      "response": {
        "message": "Not Found"
    }
  }

## Pagination
Requests for collections can return between 0 and 100 results, controlled using 
the per_page and page query parameters. 
All end points are limited to 10 results by default.

    GET /bookings?per_page=15&page=2
    
Not all endpoints support pagination. If they do, it will be mentioned in their documentation.

## Sorting
Some endpoints offer result sorting, triggered using the sort query parameter. 
The value of sort is a comma separated list of fields to sort by. You can specify 
descending sort by prepending `-` to a field. Not all fields can be sorted on. 
The endpoint documentation will list supported sort options.

The default sort for all endpoints is descending order of creation.

To get recently updated bookings, sorted in descending order of updated_at:

    GET /bookings?sort=-updated_at
    

## API Entry Point [/]

### Get Resources [OPTIONS]

+ Response 200 (application/hal+json)

    + Header

            Allow: Options

    + Body

            {
              "_links": {
                "curies": [
                  {
                    "name": "doc",
                    "href": "http://docs.haconnector.apiary.io/#{rel}",
                    "templated": true
                  }
                ],
                "doc:self": { "href": "/"},
                "doc:bookings": {"href": "/bookings"},
                "doc:properties": {"href": "/properties"}
              }
            }

# Group Bookings
Bookings related resources

## Bookings Collection [/bookings]

### List available methods for /bookings [OPTIONS]

+ Response 200 (application/hal+json;charset=utf-8)
    
    + Header

            Allow: OPTIONS, POST

    + Body

            {
              "_links": {
                "curies": [
                  {
                    "name": "doc",
                    "href": "http://docs.haconnector.apiary.io/#{rel}",
                    "templated": true
                  }
                ],
                "doc:self": { "href": "/bookings"}
              }
            }

### Create a Booking [POST]
+ Request (application/json)

        { 
            "extBookingId": "1234"
            
        }

+ Response 201 (application/hal+json;charset=utf-8)

        { 
            "id": 3, 
            "extBookingId": "1234" 
        }

## Booking [/bookings/{id}]
A single Booking object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Booking to perform action with.

### Retrieve a Booking [GET]
+ Response 200 (application/hal+json;charset=utf-8)

### Update a Booking [PATCH]
+ Request (application/json)
        
+ Response 200 (application/hal+json;charset=utf-8)


### Remove a Booking [DELETE]
+ Response 204

## Quotation [/bookings/{id}/quotation]
A single quotation with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Booking to perform action with.

### Retrieve Quotation [GET]
Get the Quotation associated with a specific booking
+ Response 200 (application/hal+json;charset=utf-8)

## Ledger [/bookings/{id}/ledger]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Booking to perform action with.

### Retrieve Ledger [GET]
Get the Ledger associated with a specific booking
+ Response 200 (application/hal+json;charset=utf-8)

# Group Properties
Properties related resources

## Properties Collection [/properties]

### Create a Property [POST]
+ Request (application/json)

        { 
            "propertyName": "Example Property Name"
        }
        
+ Response 201 (application/hal+json;charset=utf-8)

        { 
            "id": 3, 
            "propertyName": "Example Property Name" 
        }

## Property [/properties/{property_id}]
A single Booking object with all its details

+ Parameters
    + property_id (required, number, `1`) ... Numeric `id` of the Property to perform action with.

### Retrieve Property details [GET]
+ Response 200 (application/hal+json;charset=utf-8)

### Update Property details [PATCH]
+ Response 200 (application/hal+json;charset=utf-8)

### Remove a Property [DELETE]
+ Response 204

## Property Images [/properties/{property_id}/images]

+ Parameters
    + property_id (required, number, `1`) ... Numeric `id` of the Property to perform action with.

### Retrieve Images [GET]
Get all images associated with a property
+ Response 200 (application/hal+json;charset=utf-8)

### Upload new images [POST]
Upload new images

+ Request (application/json)

        { 
            "property_id": "1234"
            "images": [
                {
                    "image": "",
                    "title": "Example Image 1",
                    "description": ""
                },
                {
                    "image": "",
                    "title": "Example Image 2",
                    "description": ""
            ]
            
        }

+ Response 202 (application/hal+json;charset=utf-8)

    + Header

            Location: /queue/9876

    + Body
    
            {
              "_links": {
                "self": { "href": "/properties/1234/images/"},
                "queue": { "href": "/queue/9876"},
              }
            }
